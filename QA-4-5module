//! callback
//TODO:=================task-01=============================
// Є масив чисел. Напишіть функцію, яка приймає масив та два колбеки.
// Перший колбек виконується над усіма елементами масиву перемножуючи їх на 2.
// Другий - над елементами, ділить елементи, що можна розділити без залишку, на 5, та повертає суму усіх елементів масиву.
// Результат першого колбеку повинен передаватися другому колбеку.Функція повинна повертати результат другого колбеку.

// const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// const result = manipulateArray(array, multiplyByTwo, divideByFiveAndSum);
// console.log(result);

//! Замикання
//TODO:=================task-02=============================
// Напишіть функцію makeСhef(сhefName), яка повертає функцію
// makeDish(dish), що пам'ятає ім'я шефа при її виклику
// Функція makeDish має логірувати "<shef> is cooking <dish>"

/**
 * Параметр сhefName это локальная переменная для функции makeСhef.
 * Это значит что она будет доступна функции makeDish через замыкание.
 */

// chef1('beef wellington');
// chef2('pasta carbonara');

//TODO:====================task-03==========================
// Напишіть функцію для зберігання знижки. Функція повертає:
// Іншу функцію, яка приймає суму покупки
// і повертає фінальну суму із збереженою знижкою.

// const result = discountPremium(1000);
// console.log(result);

//! Arrow method
//TODO:=================task-04=============================
// Напиши функцію яка приймає масив чисел і повертає новий масив, унікальних чисел, які не повторюються.

// const numbers = [1, 1, 1, 2, 3, 4, 7, 7, 6, 6, 5, 4, 23, 22, 22, 111, 1, 5];

// const res = uniqArray(numbers);
// console.log(res);

//TODO:=================task-05=============================
// Дано масив об'єктів {name: "John", age: 27}, {name: "Jane", age: 31}, {name: "Bob", age: 19}.
// Перевірте, чи є хоча б один об'єкт з віком менше 20 років. Очікуваний результат: true.

// const people = [
//   { name: 'John', age: 27 },
//   { name: 'Jane', age: 31 },
//   { name: 'Bob', age: 19 },
// ];

// const res = checkAge(people);
// console.log(res);

//TODO:=================task-06=============================
// У кожному масиві якщо унікальний рядок, у якому не повторюються літери.
// Знайдіть і виведіть цей рядок.

// console.log(findUniq(['abc', 'acb', 'bac', 'foo', 'bca', 'cab', 'cba'])); // === 'foo'
// console.log(findUniq(['fghj', 'ghfj', 'abcd', 'jhgf', 'fghj', 'fgjh', 'ghjf'])); // === 'abcd'
// console.log(findUniq(['qwe', 'camp', 'acmp', 'pmac', 'camp', 'apmc', 'pmac'])); // === 'qwe'

//TODO:===============task-07===============================
// Даний словник із міст та дат виступів рок-групи
// Необхідно перетворити словник (key-value) на масив із назв міст
// Виведення міст має бути у хронологічному порядку
// Міста у яких концерт вже пройшов потрібно виключити
// Результат ["Умань", "Харків", "Одеса"]

// const concerts = {
//   Київ: new Date('2020-04-01'),
//   Умань: new Date('2023-08-02'),
//   Вінниця: new Date('2020-04-21'),
//   Одеса: new Date('2023-08-15'),
//   Хмельницький: new Date('2020-04-18'),
//   Харків: new Date('2023-08-10'),
// };

// const res = concertsToArray(concerts);
// console.log(res);

//! this and contacts
//TODO:=================task-08=============================
// Виклик checkPassword() у наведеному нижче коді повинен перевірити пароль
// та викликати user.loginOk / loginFail залежно від відповіді.

//? Однак його виклик призводить до помилки. Чому?

// const checkPassword = function (password) {
//   let ok = client.loginOk;
//   let fail = client.loginFail;

//   password === 'rockstar' ? ok() : fail();
// };

// const client = {
//   name: 'Вася',

//   loginOk() {
//     console.log(`${this.name} logged in`);
//   },

//   loginFail() {
//     console.log(`${this.name} failed to log in`);
//   },
// };

// checkPassword('rockstar');

//! class
//TODO:=================task-09=============================
// Завдання полягає у створенні програми, що дозволяє керувати замовленнями в ресторані.

// #### Для цього потрібно реалізувати клас `Order`, який містить такі приватні властивості:
// - `tableNumber` - номер столика, де зроблено замовлення
// - `items` - масив предметів замовлення, де кожен предмет містить ім'я (name) та ціну (price)
// - `isPaid` - позначає, чи оплачене замовлення (default = false)

// ##### Для класу Order потрібно реалізувати такі методи:
// - `calculateTotal`() - повертає загальну суму замовлення.
// - `markAsPaid`() - позначає замовлення як оплачене
// - `addItem`() - який додає предмет замовлення до масиву "items"
// - `removeItem`() - який видаляє предмет замовленя з масиву "items"
// ##### Додатково можна створити гетери та сетери для отримання номера столика, статусу замовлення та самого замовлення

// #### Також потрібно створити клас `MenuItem`, який містить властивості `name` та `price` для предметів замовлення.

// Create menu items

// Create an order

// Add items to the order

// Calculate the total and mark the order as paid

// console.log(`Order for table ${order.tableNumber} - Total: $${total}`);
// console.log(`Is paid: ${order.isPaid}`);

